{"/home/travis/build/npmtest/node-npmtest-lazo/test.js":"/* istanbul instrument in package npmtest_lazo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lazo/lib.npmtest_lazo.js":"/* istanbul instrument in package npmtest_lazo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lazo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lazo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lazo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lazo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lazo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lazo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lazo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_lazo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lazo.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_lazo.__dirname +\n                    '/lib.npmtest_lazo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/index.js":"var _ = require('lodash');\nvar commands = {\n    start: require('./start'),\n    stop: require('./stop'),\n    version: require('./version')\n}\n\nmodule.exports = function (cmd, options) {\n    if (cmd === 'version') {\n        return commands.version();\n    }\n\n    commands[cmd](_.extend(options || {}, { version: commands.version() }));\n};","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/start.js":"var fs = require('fs');\nvar path = require('path');\nvar lazoPath = path.dirname(module.filename);\nvar os = require('os');\n\nfunction setEnv(options) {\n    process.env['BASE_PATH'] = lazoPath;\n    process.env['BASE_REPO_DIR'] = path.join(lazoPath, 'base');\n    process.env['LAZO_VERSION'] = options.version;\n    process.env['FILE_REPO_DIR'] = options.app_dir;\n    process.env['PORT'] = options.port;\n\n    for (var k in options) {\n        process.env[k.toUpperCase()] = options[k];\n    }\n}\n\nfunction daemon() {\n    var fsx = require('fs-extra');\n    var forever = require('forever');\n\n    fsx.mkdirs(lazoPath + '/logs', function (err) {\n        if (!err) {\n            forever.load({ root: lazoPath + '/logs', pidPath: lazoPath });\n            forever.startDaemon('./lib/server/app.js', {\n                logFile: 'lazo.log',\n                pidFile: 'lazo.pid',\n                errFile: 'lazo.err',\n                sourceDir: lazoPath,\n                a: true\n            });\n        } else {\n            console.error(err);\n        }\n    });\n}\n\nmodule.exports = function (options) {\n    setEnv(options);\n    if (options.daemon) {\n        return daemon();\n    }\n\n    console.log('Starting Lazo! Please wait...');\n    // starts application server\n    var lazo = require('./lib/server/app.js');\n}","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/stop.js":"module.exports = function () {\n    var forever = require('forever');\n    var fsx = require('fs-extra');\n\n    if (fsx.existsSync(lazoPath + '/lazo.pid')) {\n        try {\n            forever.stop('lib/server/app.js', true);\n            forever.cleanUp();\n            fsx.remove(lazoPath + '/lazo.pid');\n            console.log('Lazo! stopped');\n        } catch (err) {\n            console.log('Error stopping Lazo!');\n            process.exit(1);\n        }\n    }\n};","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/version.js":"module.exports = function () {\n    var path = require('path');\n    var fs = require('fs');\n    var lazoPath = path.dirname(module.filename);\n    var packageJson = JSON.parse(fs.readFileSync(path.normalize(lazoPath + '/package.json'), 'utf8'));\n    return 'v' + packageJson.version;\n}","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/Gruntfile.js":"module.exports = function (grunt) {\n\n    var fs = require('fs');\n    var path = require('path');\n    var reqConf = grunt.file.readJSON('lib/common/resolver/paths.json');\n    var lazoReqConf = grunt.file.readJSON('conf.json');\n\n    function getPaths(conf, env) {\n        var paths = grunt.util._.extend({}, conf.common, (conf[env] || conf.client));\n        for (var key in paths) {\n            paths[key] = paths[key].replace('{env}', (env || 'client'));\n        }\n\n        return paths;\n    }\n\n    grunt.registerTask('configure-intern', 'Create intern configuration for runner', function () {\n        var env = this.args[0] === 'client-local' ? 'client' : this.args[0];\n        var paths = getPaths(reqConf, env);\n        var specs = grunt.file.expand([\n            'test/unit/' + env + '/**/*.js',\n            'test/unit/client-server/**/*.js',\n            '!**/*.skip.js'\n        ]);\n        specs = specs.map(function (spec) {\n            return spec.substr(0, spec.lastIndexOf('.js'));\n        });\n        var conf = grunt.config.get('intern');\n        conf[this.args[0]].options.suites = specs;\n        if (env === 'client' && this.args[0] !== 'client-local') {\n            conf[this.args[0]].options.config = 'test/unit/conf.client.phantomjs';\n        }\n\n        grunt.config.set('intern', conf);\n    });\n\n    // ci and local; if local or unsecure pull request uses phantomjs and selenium;\n    // if secure pull request then it uses sauce labs\n    grunt.registerTask('test', ['test-server', 'test-client']);\n    // local\n    grunt.registerTask('test-local', ['test-server', 'test-client-local']);\n\n    grunt.registerTask('test-server', ['configure-intern:server', 'intern:server']);\n    grunt.registerTask('test-client', function () {\n        var tasks = ['configure-intern:client', 'intern:client'];\n\n        // running locally; ci starts selenium before testing\n        if (!process.env.TRAVIS) {\n            tasks.unshift('exec:selenium-server');\n        }\n\n        grunt.task.run(tasks);\n    });\n\n    grunt.registerTask('test-client-local', ['exec:selenium-server', 'configure-intern:client-local', 'intern:client-local']);\n\n    grunt.initConfig({\n\n        requirejs: {\n            compile: {\n                options: {\n                    include: reqConf.lib,\n                    paths: getPaths(reqConf),\n                    shim: lazoReqConf.requirejs.client.shim,\n                    map: {\n                        '*': {\n                            'l': '/lib/client/loader.js',\n                            // don't define 'bundler' in paths.json because\n                            // it will result in a build error due to\n                            // duplicate paths; 'bundler' path is set at run time\n                            'bundler': 'lazoBundle'\n                        }\n                    },\n                    outFileName: 'lib',\n                    baseUrl:  path.resolve('.'),\n                    optimize: 'uglify2',\n                    logLevel: 4,\n                    out: 'lib/optimized/lib.js'\n                }\n            }\n        },\n\n        watch: {\n            test: {\n                files: ['lib/**/*.*', '!lib/vendor/**/*.*'],\n                tasks: ['castle'],\n                options: {\n                    events: ['changed']\n                }\n            },\n            lib: {\n                files: ['lib/**/*.*', '!lib/**/server/**/*.*', '!lib/vendor/**/*.*'],\n                tasks: ['requirejs']\n            }\n        },\n\n        intern: {\n            'client-local': {\n                options: {\n                    runType: 'runner',\n                    config: 'test/unit/conf.client.local'\n                }\n            },\n            client: {\n                options: {\n                    runType: 'runner',\n                    config: 'test/unit/conf.client'\n                }\n            },\n            server: {\n                options: {\n                    config: 'test/unit/conf.server'\n                }\n            }\n        },\n\n        exec: { 'selenium-server': 'node node_modules/selenium-server/bin/selenium &' }\n\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-requirejs');\n    grunt.loadNpmTasks('intern');\n    grunt.loadNpmTasks('grunt-exec');\n};\n","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/lazo.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar lazo = require('./run.js');\nlazo();","/home/travis/build/npmtest/node-npmtest-lazo/node_modules/lazo/run.js":"var fs = require('fs');\nvar path = require('path');\nvar lazoPath = path.dirname(module.filename);\nvar os = require('os');\nvar lazo = require('./index.js')\nvar args = parseArgs();\n\n// helper functions\nfunction getAppDir() {\n    var fileRepo = args._[1] ? path.resolve(args._[1]) : undefined;\n    return fileRepo && fs.existsSync(fileRepo) ? fileRepo : 0;\n}\n\nfunction parseArgs() {\n    return require('yargs')\n        .alias('c', 'cluster')\n        .alias('v', 'version')\n        .alias('d', 'daemon')\n        .alias('p', 'port')\n        .default('port', '8080')\n        .alias('r', 'robust')\n        .boolean(['d', 'r'])\n        .string(['p', 'c'])\n        .argv;\n}\n\n// get the options for a lazo command\nfunction getStartEnvOptions() {\n    var options = {};\n\n    for (var k in args) {\n        switch (k) {\n            case 'daemon':\n            case 'robust':\n                options[k] = args[k] === true ? '1' : '0';\n                break;\n            case 'cluster':\n                options[k] = args[k] ? args[k] : os.cpus().length;\n                break;\n            case 'port':\n                options[k] = args[k];\n                break;\n        }\n    }\n\n    return options;\n}\n\n// lazo --help [command]\nfunction help(command) {\n    switch (command) {\n        case 'start':\n            console.log('\\nUsage: lazo start app_dir -c [num] -d -p [num]\\n');\n            console.log('Options:\\n');\n            console.log('app_dir [required] application directory');\n            console.log('-c [optional] cluster, value [optional]\\n');\n            console.log('-d [optional] daemonize process using forever\\n');\n            console.log('-p [optional] port, value [required]\\n');\n            break;\n        case 'stop':\n            console.log('\\nUsage: lazo stop\\n');\n            break;\n        default:\n            console.log('\\nUsage: lazo --help command\\n');\n            console.log('Available commands: start stop\\n');\n            console.log('Options:\\n');\n            console.log('command [optional]\\n');\n            break;\n    }\n}\n\n// entry point\nfunction main() {\n    if (args._.length) {\n        switch (args._[0]) {\n            case 'start':\n                args.app_dir = getAppDir();\n                lazo('start', args);\n                break;\n            case 'stop':\n                lazo('stop', args);\n                break;\n            default:\n                help();\n                break;\n        }\n    } else {\n        if (args.version) {\n            console.log('v' + lazo('version'));\n        } else if (args.help) {\n            help(args.help);\n        } else {\n            help();\n        }\n    }\n}\n\nmodule.exports = main;"}